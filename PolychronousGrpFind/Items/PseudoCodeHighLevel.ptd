

def: MAIN

	initialize from input:
		-- Network           {This is a vector of Synapses representing the Network}
		-- Neurons           {This is a vector of neurons containing the parameters of each neuron}
		-- onemsbyTstep      {This gives the resolution of time step as no. of time steps per ms}
		-- DelayRange        {Max possible delay in ms}

	perform "Process Input Variables", initialize :
		-- Network                  {Re-initialize having stripped off weak synapses}
		-- StrippedNetworkMapping   {StrippedNetworkMapping[k] is the index in original network of the k^th synapse in the stripped network}
		-- FlippedExcNetwork        {This is a vector of Excitatory Synapses in the stripped network sorted as (NEnd, NBeg)}
		-- NExc                     {Number of excitatory neurons}
		-- MExc                     {Number of excitatory synapses}
		-- PreSynNeuronSectionBeg   {PreSynNeuronSectionBeg[j]  = Index of first synapse in Network starting at Neuron j+1}
		-- PreSynNeuronSectionEnd   {PreSynNeuronSectionBeg[j]  = Index of last  synapse in Network starting at Neuron j+1}
		-- PostSynNeuronSectionBeg  {PostSynNeuronSectionBeg[j] = Index of first synapse in Network ending   at Neuron j+1}
		-- PostSynNeuronSectionEnd  {PostSynNeuronSectionEnd[j] = Index of last  synapse in Network ending   at Neuron j+1}
	
	create MapOfPNGs as:
		"Empty Hash table meant to contain PNG's along with the Neuron Triplet/Target Neuron which 
		generated them"
	
	for each TargetNeuron which is "An Excitatory Neuron"
		for each NeuronTriplet which is "Subset of Excitatory Presyn Neurons of `NeuronTarget`"
			perform "Initialize Simulation State Variables"
			perform "Neural Simulation", initialize CurrentPNG as:
				"Current PNG generated by the above triplet timed to make TargetNeuron fire"
			if CurrentPNG.MaxLen > "Threshold Max Length"
				Add CurrentPNG into MapOfPNGs
				
	