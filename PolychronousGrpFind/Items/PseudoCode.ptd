define "Input Variables":
	-- Network                  {Vector of Synapses that define the Network / Stripped Network}
	-- Neurons                  {Vector of Neurons holding the properties of each neuron}
	-- FlippedExcNetwork        {Flip-Sorted Vector of Excitatory Synapses}
	-- onemsbyTstep             {Number of simulation time steps per ms}
	-- DelayRange               {Maximum possible delay in ms}
	-- HasSpikedNow             {The list of all neurons which have currently spiked and whose spikes
	                             need to be stored in SpikeQueue}
	-- ProhibitedSet            {Set of Neuron Combinations that are prohibited from starting PNGs as
	                             they are subsets of another PNG}
	-- PNGStorageMap            {unordered_map storing pairs of (Neuron Combination, PNG)}

define "Intermediate Variables":
	-- PreSynNeuronSectionBeg   {PreSynNeuronSectionBeg[j] = Index in Network of the first synapse 
	                             that starts from Neuron (j+1)}
	
	-- PreSynNeuronSectionEnd   {PreSynNeuronSectionBeg[j] = Index in Network of the first synapse 
	                             that starts from Neuron (j+1)}
	
	-- PostSynNeuronSectionBeg  {PostSynNeuronSectionBeg[j] = Index in FlippedExcNetwork of the first 
	                             synapse that ends at Neuron (j+1)}
	
	-- PostSynNeuronSectionEnd  {PostSynNeuronSectionEnd[j] = Index in FlippedExcNetwork of the first
	                             synapse that ends at Neuron (j+1)}
	-- NonZeroIinNeurons;       {This is the list of all Neurons that are currently carrying into th-
	                             emselves a non zero current (thresholded by ZeroCurrentThresh)}
	-- CurrentNonZeroIinNeurons {This is a list of Neurons that have received NonZero currents in the
	                             current time instant. This therefore also corresponds to the locati-
	                             ons in CurrentContribSyn which are Non-Empty}
	-- CurrentContribSyn        {This is a vector of vectors (one vector per neuron) with each vector
	                             holding the indices of all the synapses that have contributed to the
	                             nueron at the particular time instant}
	
define 

def: Attenuate Current
	for each Neuron from 1 to N
		InputCurrent[Neuron - 1] *= 1/3;

def: Process Spike Queue
	for each SpikeSynIndex in "Currently Arriving Vector in `SpikeQueue`"
		update InputCurrent[SynapseList[SpikeSynIndex].NEnd - 1].
		Add PreSynaptic Neuron into List of PreSyn Neurons causing SynapseList[SpikeSynIndex].NEnd to spike.
		if Weight > Thresh
			Signal Issuing of Spike from Current Neuron
			if CurrentCombination which caused Spike is triplet or more
				Store CurrentCombination into Set of Prohibited Combinations
				Remove Networks Corresponding to CurrentCombination
			Reset InputCurrent[SynapseList[SpikeSynIndex].NEnd - 1] to 0.
	clear Current SpikeQueueVector

def: Store Spikes in SpikeQueue
	for each Neuron in 1 to NExc
		if Neuron has Spiked
			for each SynIndex of Synapse starting from Neuron
				push SynIndex into Appropriate Vector in SpikeQueue.

				
def MAIN:
	
	initialize "Simulator Variables":
		-- Network
		-- Neurons
		-- onemsbyTstep
		-- DelayRange
		-- N
		-- Iin
		-- ProhibitedSet {Set of Neuron Combinations that are prohibited from starting PNGs
		                  as they are subsets of another PNG}
		-- PNGStorageMap {unordered_map storing pairs of (Neuron Combination, PNG)}
		-- HasSpikeNow   {The Set of neurons which have spiked at the current instant}
		-- other variables by default construction / emptying
	
	perform "Discard all edges with weights < 8", initialize following:
		-- Network            {This contains the stripped network}
		-- tempNetwork        {This contains the original Network}
		-- StrippedNetMapping {This contains the Mapping from the Stripped Network to original network}
	
	initialize "PreSyn Section Variables":
		-- PreSynNeuronSectionBeg {Long Description -Understood-}
		-- PreSynNeuronSectionEnd {Long Description -Understood-}
	
	initialize "Constants":
		-- QueueSize {Size of SpikeQueue}
		-- NExc {Number of Excitatory Neurons}
		-- MExc {Number of Excitatory Synapses}
	
	initialize "Intermediate Variables"
		-- FlippedExcNetwork {Flip-Sorted Network containing only Excitatory Synapses}
	
	initialize "PostSyn Section Variables"
		-- PostSynNeuronSectionBeg {Long Description -Understood-}
		-- PostSynNeuronSectionEnd {Long Description -Understood-}
	
	for each TargetNeuron which is "Excitatory Neuron"
		assign IncomingSynCurr as:
			"The Subvector of `FlippedExcNetwork` containing the 
			(Excitatory) Incoming Synapses to `TargetNeuron`"
		
		for each Combination in "Triplet Combinations among `IncomingSynCurr`":
			if Combination is not in ProhibitedSet
				// Analyse current combination
				initialize "The neuron simulation variables [1]"
					-- Iin
					-- SpikeQueue
					-- time
					-- CurrentQIndex
				create SynapseSet as:
					" The vector of synapses corresponding to the current combination "
				sort SynapseSet by Synapse.Delays in ascending order
				
				create DelaySet as:
					" The Delays of Synapses in SynapseSet "
				perform Initial Iteration:
					pushback SynapseSet.Last.NStart {PreSyn Neuron of highest delay Synapse} into HasSpikedNow
					call StoreSpikes using Initial State as true
					increment time, CurrentQIndex
					
				do until SpikeQueue is empty:
					call AttenuateCurrent
					call UpdateCurrent
					call PublishCurrentSpikes using PNGCurrent
					call AnalyseGroups using CurrentCombination
					
					call StoreSpikes using InitialState as false // store spikes in SpikeQueue
					if " any initial spikes are left " and 
					   time = " time such that next Initial Spike must happen now to coincide with others "
						
						pushback "Starting Neuron of corresponding synapse in `SynapseSet`" into HasSpikedNow
						call StoreSpikes using InitialState as true
					increment time
					increment CurrentQIndex mod QueueSize
			else
				remove Combination from ProhibitedSet

/********** Implementation Details ************\
In Order to implement the Signalling of an issued spike, we will require a vector called HasSpiked of size N which stored wether or not the current neuron has spike or not.

The network that is returned, will contain 
1. Spike Pattern (i.e. sequence of (Neuron, NeuronSpikeTimings))
2. Synapse List (according to original Index.
3. Index List of which synapses are responsible for which spike.
\***********************************************/

/****************** Contracts ******************\
1. FlippedExcNetwork must be sorted 
\***********************************************/
